package com.education.business.exception;import cn.hutool.core.util.StrUtil;import com.education.auth.exception.PermissionException;import com.education.business.message.EmailSender;import com.education.business.task.TaskManager;import com.education.common.constants.SystemConstants;import com.education.common.exception.BusinessException;import com.education.common.utils.DateUtils;import com.education.common.utils.IpUtils;import com.education.common.utils.Result;import com.education.common.utils.ResultCode;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.support.DefaultMessageSourceResolvable;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import javax.annotation.Resource;import java.util.Date;import java.util.List;import java.util.stream.Collectors;/** * 捕获系统异常 * @author zengjintao * @create 2019/3/25 9:24 * @since 1.0 **/@RestControllerAdvicepublic class SystemExceptionHandler {    private static final Logger logger = LoggerFactory.getLogger(SystemExceptionHandler.class);    @Resource    private EmailSender emailSender;    private static final String EMAIL = "1913188966@qq.com";    @Value("${spring.profiles.active}")    private String env;    @Resource    private TaskManager taskManager;    @ExceptionHandler(PermissionException.class)    public Result resolvePermissionException() {        return Result.fail(ResultCode.NO_PERMISSION, "权限不足,无法访问");    }    @ExceptionHandler(BusinessException.class)    public Result resolveBusinessException(BusinessException e) {        if (e.getResultCode() != null) {            return Result.fail(e.getResultCode().getCode(), e.getResultCode().getMessage());        }        return Result.fail(ResultCode.FAIL, e.getMessage());    }    @ExceptionHandler(MethodArgumentNotValidException.class)    public Result resolveMethodArgumentNotValidException(MethodArgumentNotValidException e) {        logger.warn("参数校验失败", e);        List<String> errorMsgList = e.getBindingResult()                .getAllErrors()                .stream()                .map(DefaultMessageSourceResolvable::getDefaultMessage)                .collect(Collectors.toList());        String errorMsg = errorMsgList.get(0);        if (StrUtil.isBlank(errorMsg)) {            return Result.fail(ResultCode.FAIL, "非法请求");        }        return Result.fail(ResultCode.FAIL, errorMsg);    }    @ExceptionHandler(Exception.class)    public Result resolveException(Exception ex) {        logger.error("系统异常", ex);        if (SystemConstants.ENV_PROD.equals(env)) {            String content = "服务器主机节点"                    + IpUtils.getLocalHost() + "于"                    + DateUtils.getSecondDate(new Date())                    + "发生异常："                    + ex.getCause().getMessage();            taskManager.pushTask(() -> {                emailSender.sendEmail("服务器异常提醒", content, EMAIL);            });        }        return Result.fail(ResultCode.FAIL, "系统异常");    }}